### Basic Concepts

1.  **Factorial Calculator:** Write a program to calculate the factorial of a non-negative integer entered by the user.
2.  **Prime Number Checker:** Write a program to check if a given number is prime or not.
3.  **Fibonacci Series Generator:** Write a program to generate the Fibonacci series up to a certain number of terms specified by the user.
4.  **Simple Calculator:** Create a program that takes two numbers and an operator (+, -, *, /) as input and performs the corresponding calculation.

### Object-Oriented Programming (OOP)

1.  **Student Information System:** Create a `Student` class with attributes like `name`, `rollNumber`, and `grade`. Create methods to set and get these attributes and a method to display the student's information.
2.  **Bank Account Management:** Create a `BankAccount` class with attributes like `accountNumber`, `accountHolderName`, and `balance`. Implement methods for depositing, withdrawing, and checking the balance.
3.  **Inheritance with Shapes:** Create a `Shape` superclass with a method `calculateArea()`. Create subclasses like `Circle`, `Rectangle`, and `Triangle` that inherit from `Shape` and override the `calculateArea()` method to provide their specific implementations.

### Data Structures and Algorithms

1.  **Singly Linked List:** Implement a singly linked list in Java with methods to add a node, delete a node, and display the list.
2.  **Binary Search Tree:** Implement a binary search tree with methods for inserting a node, deleting a node, and performing in-order, pre-order, and post-order traversals.
3.  **Stack and Queue Implementation:** Implement a stack and a queue using arrays or linked lists.

### Exception Handling

1.  **Division by Zero:** Write a program that takes two numbers as input from the user and divides them. Handle the `ArithmeticException` that occurs if the user enters 0 as the divisor.
2.  **File Not Found:** Write a program that attempts to read from a file. Handle the `FileNotFoundException` that occurs if the file does not exist.

### File I/O

1.  **Write to a File:** Write a program that takes input from the user and writes it to a text file.
2.  **Read from a File:** Write a program that reads the content of a text file and displays it on the console.

### Collections Framework

1.  **ArrayList Operations:** Create an `ArrayList` of strings. Add some elements, then sort the list and print it.
2.  **HashMap for Student Grades:** Use a `HashMap` to store the names of students as keys and their grades as values. Write a program to add new students, retrieve the grade of a specific student, and print all the students and their grades.
