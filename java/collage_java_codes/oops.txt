### The Four Main Pillars of OOP

1.  **Encapsulation:**
    *   **What it is:** Encapsulation is the bundling of data (attributes) and the methods (behaviors) that operate on that data into a single unit called a **class**. It also involves restricting direct access to some of an object's components, which is known as **data hiding**.
    *   **How it's done in Java:** Data hiding is achieved by declaring the class's attributes as `private` and providing `public` methods (getters and setters) to access and modify them.
    *   **Analogy:** Think of a capsule. The medicine inside is the data, and the outer shell is the methods. The shell protects the medicine from the outside world.

2.  **Inheritance:**
    *   **What it is:** Inheritance is a mechanism where a new class (subclass or child class) inherits attributes and methods from an existing class (superclass or parent class). This promotes code reusability.
    *   **How it's done in Java:** You use the `extends` keyword to create a subclass. For example, `class Dog extends Animal`.
    *   **Analogy:** Think of a child inheriting traits like eye color and hair color from their parents. The child can also have their own unique traits.

3.  **Polymorphism:**
    *   **What it is:** Polymorphism, which means "many forms," is the ability of an object to take on many forms. In Java, it allows you to perform a single action in different ways.
    *   **How it's done in Java:** There are two main types of polymorphism in Java:
        *   **Compile-time Polymorphism (Method Overloading):** This occurs when there are multiple methods in the same class with the same name but different parameters (different number of arguments, or different types of arguments).
        *   **Run-time Polymorphism (Method Overriding):** This occurs when a subclass provides a specific implementation of a method that is already provided by its superclass.
    *   **Analogy:** Think of a person who can be a student, an employee, and a friend at the same time. They behave differently in each role.

4.  **Abstraction:**
    *   **What it is:** Abstraction is the concept of hiding the complex implementation details and showing only the essential features of the object. It helps in managing complexity.
    *   **How it's done in Java:** Abstraction is achieved using **abstract classes** and **interfaces**. An abstract class can have both abstract (unimplemented) and concrete (implemented) methods, while an interface can only have abstract methods (in Java 8 and later, they can also have default and static methods).
    *   **Analogy:** Think of driving a car. You only need to know how to use the steering wheel, accelerator, and brakes. You don't need to know the complex details of how the engine works.

### Other Important OOP Concepts in Java

In addition to the four main pillars, you should also understand these fundamental concepts:

*   **Objects:** An object is a basic unit of OOP and represents a real-life entity. It is an instance of a class and has a state (attributes) and behavior (methods).
*   **Classes:** A class is a blueprint or a template for creating objects. It defines the attributes and methods that the objects of that class will have.
*   **Constructors:** A constructor is a special method that is used to initialize an object when it is created. It has the same name as the class and does not have a return type.
*   **Keywords:** Understanding the following keywords is crucial for working with OOP in Java:
    *   `this`: Refers to the current object.
    *   `super`: Refers to the immediate parent class object.
    *   `static`: Used for memory management, it indicates that a variable or method belongs to the class rather than an instance of the class.
    *   `final`: Used to create constants, prevent method overriding, and prevent inheritance.
