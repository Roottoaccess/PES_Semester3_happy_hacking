### Arrays and Strings

1.  **Missing Number:** Given an array containing *n* distinct numbers taken from `0, 1, 2, ..., n`, find the one that is missing from the array.
2.  **Valid Palindrome:** Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.
3.  **First Unique Character in a String:** Given a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.

### Linked Lists

1.  **Reverse Linked List:** Reverse a singly linked list.
2.  **Middle of the Linked List:** Given a non-empty, singly linked list with head node `head`, return a middle node of the linked list.
3.  **Linked List Cycle:** Given a linked list, determine if it has a cycle in it.

### Stacks and Queues

1.  **Implement Queue using Stacks:** Implement a first in first out (FIFO) queue using only two stacks.
2.  **Valid Parentheses:** Given a string containing just the characters `(`, `)`, `{`, `}`, `[` and `]`, determine if the input string is valid.

### Trees and Graphs

1.  **Maximum Depth of Binary Tree:** Given a binary tree, find its maximum depth.
2.  **Validate Binary Search Tree:** Given a binary tree, determine if it is a valid binary search tree (BST).
3.  **Number of Islands:** Given a 2d grid map of `'1'`s (land) and `'0'`s (water), count the number of islands.

### Hash Maps/Hash Sets

1.  **Two Sum:** Given an array of integers, return indices of the two numbers such that they add up to a specific target.
2.  **Contains Duplicate:** Given an array of integers, find if the array contains any duplicates.

### Sorting and Searching

1.  **Binary Search:** Given a sorted (in ascending order) integer array `nums` of `n` elements and a `target` value, write a function to search `target` in `nums`. If `target` exists, then return its index, otherwise return -1.
2.  **Merge Sorted Array:** Given two sorted integer arrays `nums1` and `nums2`, merge `nums2` into `nums1` as one sorted array.

### Recursion

1.  **Generate Parentheses:** Given *n* pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
2.  **Fibonacci Number:** The Fibonacci numbers, commonly denoted `F(n)` form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is, `F(0) = 0`, `F(1) = 1`, `F(n) = F(n - 1) + F(n - 2)`, for `n > 1`. Given `n`, calculate `F(n)`.
